5.4 对象包装器与自动装箱

有时， 需要将 int 这样的基本类型转换为对象。 所有的基本类型都冇一个与之对应的类。
例如，丨nteger 类对应基本类型 int。通常， 这些类称为包装器 （ wrapper ) 这些对象包装器类
拥有很明显的名字：Integer、Long、Float、Double、Short、Byte、Character Void 和 Boolean (前
6 个类派生于公共的超类 Number)。对象包装器类是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值。
同时， 对象包装器类还是 final , 因此不能定义它们的子类。
假设想定义一个整型数组列表。而尖括号中的类型参数不允许是基本类型，也就是说，不允许写成 ArrayList<int>。
这里就用到了 Integer 对象包装器类。我们可以声明一个 Integer对象的数组列表。
    ArrayList<Integer> list = new ArrayList<>()；

幸运的是， 有一个很有用的特性， 从而更加便于添加 int 类型的元素到 ArrayLisKlntegeP
中。下面这个调用
    list.add(3);
将自动地变换成
    list.add (Integer.value0f(3));
这种变换被称为自动装箱（autoboxing)

相反地， 当将一个 Integer 对象赋给一个 int 值时， 将会自动地拆箱。也就是说， 编译器
将下列语句：
    int n = list.get(i);
翻译成
    int n = list.get(i).intValue();


    大多数情况下，容易有一种假象， 即基本类型与它们的对象包装器是一样的，只是它们
    的相等性不同。大家知道， == 运算符也可以应用于对象包装器对象， 只不过检测的是对象是
    否指向同一个存储区域， 因此，下面的比较通常不会成立：
    Integer a = 1000;
    Integer b = 1000;
    if (a = b) . . .
    然而，Java 实现却有可能（ may) 让它成立。如果将经常出现的值包装到同一个对象中，
    这种比较就有可能成立。这种不确定的结果并不是我们所希望的。解决这个问题的办法是在
    两个包装器对象比较时调用 equals 方法。
    **注释： 自动装箱规范要求 boolean、byte、char 127， 介于 -128 ~ 127 之间的 short 和
    int 被包装到固定的对象中。例如，如果在前面的例子中将 a 和 b 初始化为 100，对它们
    进行比较的结果一定成立。